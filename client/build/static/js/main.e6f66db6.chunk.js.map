{"version":3,"sources":["../node_modules/short-unique-id/lib sync","components/PlayerList.js","utils.js","wsclient/index.js","wsclient/utils.js","WSContext.js","components/CustomButton.js","components/Setup.js","components/Lobby.js","components/game/NumberSpinner.js","components/game/NumbersDisplay.js","components/game/AnswerDisplay.js","components/game/Waiting.js","shared/math/utils.js","components/game/NumbersInput.js","components/game/index.js","components/Game.js","App.js","serviceWorker.js","index.js","shared/index.js","shared/requests.js","shared/events.js","shared/game.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","PlayerList","me","players","readyStates","score","length","ListGroup","map","player","text","name","readyState","points","className","Tooltip","title","Item","key","_uid","ShortUniqueId","require","default","WebSocketClient","url","this","ws","ready","message_id","requests","Map","callbacks","_connect","close","w3cwebsocket","_attachCallbacks","onopen","onConnectionChange","onclose","console","warn","onmessage","data","rawResponse","raw","parsed","JSON","parse","assert","m_id","response","parseResponse","_resolveRequest","event","parseEvent","onEvent","onerror","error","noWarn","message","request","get","clearTimeout","timeout","delete","seq","payload","send","stringify","Promise","set","setTimeout","type","REQUEST_TYPE","UPDATE_NAME","newName","TOGGLE_READY","WSContext","React","createContext","CustomButton","variant","isLoading","isDisabled","onClick","Button","disabled","Setup","useContext","useState","setName","nameError","setNameError","loading","setLoading","submitName","sendNameUpdate","then","res","Form","noValidate","onSubmit","preventDefault","stopPropagation","Group","controlId","Label","Control","onBlur","trimmed","trim","autoFocus","isInvalid","placeholder","required","value","onChange","target","maxLength","Feedback","Lobby","isReady","setIsLoading","setError","client","FormControl","component","FormLabel","FormGroup","aria-label","row","FormControlLabel","control","Switch","checked","sendToggleReadyUpdate","label","labelPlacement","FormHelperText","genVal","min","max","Math","floor","random","NumberSpinner","ms","interval","useRef","setValue","useEffect","current","setInterval","clearInterval","NumbersDisplay","numbers","spinTarget","every","num","Fragment","Grid","container","spacing","item","xs","align","Box","ButtonGroup","color","disableRipple","number","index","AnswerDisplay","player_name","player_answer","player_answer_value","player_score","error_message","Waiting","timer","t","setT","Stack","base","v","push","pop","NumbersInput","isSubmitting","inputMessage","setInputMessage","submitValue","equationOrError","eqn","replace","validChars","Set","char","has","ops","tokens","c","lIdx","precedence","output","opstack","token","empty","top","stack","b","a","Number","TextField","rows","val","helperText","onKeyPress","GameInner","gameState","submitting","setSubmitting","SUBMIT_ANSWER","mainContent","status","GAME_STATUS","WAITING","ROUND_STARTING","ROUND_STARTED","ROUND_FINISHED","SHOWING_ANSWER","current_round","total_rounds","Game","lobbyState","Boolean","LOBBY_STATE","WAITING_FOR_PLAYERS","IN_GAME","_ws","App","connecting","setConnecting","setPlayers","setReadyStates","setLobbyState","setGameState","setId","find","setCallbacks","connected","EVENT_TYPE","ID_UPDATE","PLAYER_LIST_UPDATE","READY_STATES_UPDATE","ready_states","LOBBY_STATE_UPDATE","state","GAME_STATE_UPDATE","Provider","Container","Jumbotron","Row","Col","Dialog","open","p","CircularProgress","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e6f66db6.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 152;","// @flow\nimport React from 'react';\n\nimport type {Player, ReadyStates} from '../shared';\nimport type {Score} from '../shared/game';\n\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport CheckBoxOutlineBlankOutlinedIcon from '@material-ui/icons/CheckBoxOutlineBlankOutlined';\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined';\nimport Tooltip from '@material-ui/core/Tooltip';\n\ntype Props = {\n  me: ?Player,\n  players: Array<Player>,\n  readyStates: ReadyStates,\n  score: ?Score,\n};\n\nconst PlayerList = ({\n  me,\n  players,\n  readyStates,\n  score,\n}: Props) => {\n  return <div>\n    <h2>Players</h2>\n    {players.length === 0\n      ? <h4>Waiting for players to join...</h4>\n      : <ListGroup>\n        {players.map(player => {\n          const text = me && me.id === player.id\n            ? `${player.name} (You)`\n            : player.name;\n          let readyState = null;\n          const points = score\n            ? ` - ${(score[player.id] || 0)}`\n            : null;\n          if (me) {\n            readyState = (\n              <span className='mr-1'>\n                {\n                  readyStates[player.id]\n                    ? (\n                      <Tooltip title={`${player.name} is ready`}>\n                        <CheckBoxOutlinedIcon />\n                      </Tooltip>\n                    )\n                    : (\n                      <Tooltip title={`${player.name} is not ready`}>\n                        <CheckBoxOutlineBlankOutlinedIcon />\n                      </Tooltip>\n                    )\n                }\n              </span>\n            );\n          }\n          return <ListGroup.Item key={player.id}>{readyState}{text}{points}</ListGroup.Item>;\n        })}\n      </ListGroup>\n    }\n  </div>\n};\n\nexport default PlayerList;\n\n","// @flow\n\nimport type {ID} from './shared';\n\nconst {default: ShortUniqueId} = require('short-unique-id');\nconst _uid = new ShortUniqueId();\n\n\nexport function uid(): ID {\n  const id: ID = _uid.seq();\n  return id;\n};\n","// @flow\n\nimport {w3cwebsocket} from 'websocket';\n\nimport type {ID, Response, RawRequest, Request, Event, Player, UpdateNameRequest, ToggleReadyRequest} from '../shared';\nimport {REQUEST_TYPE} from '../shared';\n\nimport {parseResponse, parseEvent} from './utils';\nimport {uid} from '../utils';\n\nexport type WebSocketMessage = {\n  players?: Array<Player>,\n};\n\ntype PendingRequest = {\n  resolve: (Response) => void,\n  timeout: any,\n};\n\nconst TIMEOUT = 1000;\n\ntype ClientCallbacks = {\n  onConnectionChange: (bool) => void,\n  onEvent: (Event) => void,\n};\n\nexport default class WebSocketClient {\n  url: string;\n  ws: any;\n  ready: boolean;\n  message_id: number;\n  requests: Map<ID, PendingRequest>;\n  callbacks: ?ClientCallbacks;\n  constructor(url: string) {\n    this.url = url;\n    this.ws = null;\n    this.ready = false;\n    this.message_id = 0;\n    this.requests = new Map();\n    this.callbacks = null;\n    this._connect();\n  }\n\n  _connect(): void {\n    if (this.ws) {\n      this.ws.close();\n    }\n    this.ws = new w3cwebsocket(this.url);\n    this._attachCallbacks();\n  }\n\n  _attachCallbacks(): void {\n    const callbacks = this.callbacks;\n    if (!callbacks) {\n      return;\n    }\n    this.ws.onopen = () => {\n      callbacks.onConnectionChange(true);\n    };\n    this.ws.onclose = () => {\n      callbacks.onConnectionChange(false);\n      console.warn('connection closed, attempting to reconnect');\n      this.ws = null;\n      this._connect();\n    };\n    this.ws.onmessage = ({data}: {data: string}) => {\n      const rawResponse = parseResponse(data);\n      if (rawResponse) {\n        this._resolveRequest(rawResponse.m_id, rawResponse.response);\n        return;\n      }\n      const event = parseEvent(data);\n      if (event) {\n        callbacks.onEvent(event);\n        return;\n      }\n      console.warn('unknown message format', {data});\n    };\n    this.ws.onerror = (e) => {\n      console.error('socket error, closing connection', e);\n      this.ws.close();\n    };\n  }\n\n  setCallbacks(callbacks: ClientCallbacks): void {\n    this.callbacks = callbacks;\n    this._attachCallbacks();\n  }\n\n  _resolveRequest(id: ID, response: ?Response): void {\n    const noWarn = response == null;\n    response = response ?? {\n      error: true,\n      message: 'TIMEOUT',\n    };\n    const request = this.requests.get(id);\n    if (request == null) {\n      if (!noWarn) {\n        console.warn(`request ID ${id} is not pending`);\n      }\n      return;\n    }\n    clearTimeout(request.timeout);\n    request.resolve(response);\n    this.requests.delete(id);\n  }\n\n  async send(request: Request): Promise<Response> {\n    const m_id = uid();\n    const payload: RawRequest = {\n      m_id,\n      request,\n    };\n    this.ws.send(JSON.stringify(payload));\n    return new Promise<Response>(resolve => {\n      this.requests.set(m_id, {\n        resolve,\n        timeout: setTimeout(() => {\n          this._resolveRequest(m_id, null);\n        }, TIMEOUT),\n      })\n    });\n  }\n\n  async sendNameUpdate(name: string): Promise<Response> {\n    const request: UpdateNameRequest = {\n      type: REQUEST_TYPE.UPDATE_NAME,\n      newName: name,\n    };\n    return this.send(request);\n  }\n\n  async sendToggleReadyUpdate(): Promise<Response> {\n    const request: ToggleReadyRequest = {\n      type: REQUEST_TYPE.TOGGLE_READY,\n    };\n    return this.send(request);\n  }\n\n};\n","// @flow\n\nimport type {Event, RawResponse} from '../shared';\nimport assert from 'assert';\n\nexport function parseResponse(raw: string): ?RawResponse {\n  let parsed = null;\n  try {\n    parsed = JSON.parse(raw);\n    assert('m_id' in parsed);\n    assert('response' in parsed);\n    return {\n      m_id: parsed.m_id,\n      response: parsed.response,\n    };\n  } catch {\n    return null;\n  }\n};\n\nexport function parseEvent(raw: string): ?Event {\n  let parsed = null;\n  try {\n    parsed = JSON.parse(raw);\n    assert('type' in parsed);\n    return parsed;\n  } catch {\n    return null;\n  }\n}\n","// @flow\n\nimport React from 'react';\nimport WebSocketClient from './wsclient';\n\nconst dummy: WebSocketClient = ('lol': any);\n\nconst WSContext = React.createContext<WebSocketClient>(dummy);\n\nexport default WSContext;","// @flow\n\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\n\ntype Variant = 'primary' | 'success' | 'danger';\n\ntype Props = {\n  text: string,\n  isLoading?: bool,\n  isDisabled?: bool,\n  variant?: Variant,\n  onClick: () => void,\n};\n\nconst CustomButton = ({\n  text,\n  variant = 'primary',\n  isLoading = false,\n  isDisabled = false,\n  onClick,\n}: Props) => {\n  return <Button variant={variant} onClick={onClick} disabled={isDisabled || isLoading}>{isLoading ? 'Loading...' : text}</Button>\n};\n\nexport default CustomButton;\n","// @flow\n\nimport React, {useContext, useState} from 'react';\nimport Form from 'react-bootstrap/Form';\n\nimport type {Response} from '../shared';\n\nimport WSContext from '../WSContext';\nimport Button from './CustomButton';\n\nconst BLANK_NAME_ERROR = 'Please enter a name';\n\nconst Setup = () => {\n  const ws = useContext(WSContext);\n  const [name, setName] = useState('');\n  const [nameError, setNameError] = useState<?string>(BLANK_NAME_ERROR);\n  const [loading, setLoading] = useState(false);\n  const onNameChange = (e) => {\n    const newName: string = e.target.value;\n    setName(newName);\n    if (newName.length === 0) {\n      setNameError(BLANK_NAME_ERROR);\n    } else if (!!nameError) {\n      setNameError(null);\n    }\n  };\n  const validateName = () => {\n    const trimmed = name.trim();\n    if (trimmed !== name) {\n      setName(trimmed);\n    }\n  };\n\n  const submitName = () => {\n    if (!!nameError) {\n      return;\n    }\n    if (name.length === 0) {\n      setNameError(BLANK_NAME_ERROR);\n      return;\n    }\n    setLoading(true);\n    ws.sendNameUpdate(name).then((res: Response) => {\n      if (res.error) {\n        setNameError(res.message);\n        setLoading(false);\n      }\n    });\n  }\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    submitName();\n  };\n\n  return (\n    <div>\n      <h2>Enter a name to join the game</h2>\n      <Form noValidate onSubmit={onSubmit}>\n        <Form.Group controlId='nameInput'>\n          <Form.Label>Name</Form.Label>\n          <Form.Control onBlur={validateName} autoFocus isInvalid={!!nameError} placeholder='Name' required value={name} onChange={onNameChange} maxLength={20} />\n          <Form.Control.Feedback type='invalid'>{nameError}</Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group controlId='submitButton'>\n          <Button text='Join' isDisabled={!!nameError} isLoading={loading} onClick={submitName} />\n        </Form.Group>\n      </Form>\n    </div>\n  );\n};\n\nexport default Setup;\n","// @flow\n\nimport React, {useContext, useState} from 'react';\nimport Switch from '@material-ui/core/Switch';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nimport WSContext from '../WSContext';\n\ntype Props = {|\n  isReady: bool,\n|};\n\nconst Lobby = ({\n  isReady,\n}: Props) => {\n  const [isLoading, setIsLoading] = useState<bool>(false);\n  const [error, setError] = useState<?string>(null);\n  const client = useContext(WSContext);\n\n  const onSwitch = (): void => {\n    setIsLoading(true);\n    setError(null);\n    client.sendToggleReadyUpdate().then(response => {\n      setIsLoading(false);\n      if (response.error) {\n        setError(response.message);\n      }\n    });\n  };\n \n  return (\n    <FormControl component='fieldset'>\n      <FormLabel component='legend'>Game will start once all players are ready!</FormLabel>\n      <FormGroup aria-label='position' row>\n        <FormControlLabel\n          control={<Switch name='temp' disabled={isLoading} checked={isReady} onChange={onSwitch} />}\n          label='Ready'\n          labelPlacement=\"start\"\n        />\n        {error && <FormHelperText className='ml-4' error={true}>{error}</FormHelperText>}\n      </FormGroup>\n    </FormControl>\n  );\n};\n\nexport default Lobby;","// @flow\nimport {useEffect, useState, useRef} from 'react';\n\ntype Props = {|\n  // Number of ms between number change\n  ms?: number\n|};\n\n// TODO share with server code\nconst rand = (min: number, max: number): number => {\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n\nconst genVal = () => rand(100, 1000);\n\nconst NumberSpinner = ({\n  ms = 50,\n}: Props) => {\n  const interval = useRef(null);\n  const [value, setValue] = useState(genVal())\n  useEffect(() => {\n    interval.current = setInterval(() => {\n      if (interval.current) {\n        setValue(genVal());\n      }\n    }, ms);\n    return () => {\n      clearInterval(interval.current);\n      interval.current = null;\n    };\n  }, [ms]);\n  return value;\n}\n\nexport default NumberSpinner;","// @flow\n\nimport React from 'react';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport NumberSpinner from './NumberSpinner';\n\ntype Props = {|\n  target: ?number,\n  numbers: Array<?number> | Array<number>,\n|};\n\nconst NumbersDisplay = ({\n  target,\n  numbers,\n}: Props) => {\n  const spinTarget = numbers.every(num => num != null);\n  return (\n    <React.Fragment>\n      <Grid container spacing={8}>\n        <Grid item xs align='center'>\n          <h4>Target</h4>\n          <Box>\n            {target || (spinTarget && <NumberSpinner />) || '...'}\n          </Box>\n        </Grid>\n      </Grid>\n      <Grid container spacing={8}>\n        <Grid item xs align='center'>\n          <b>Numbers:</b>\n          <br/>\n          <ButtonGroup\n            variant='text'\n            color='secondary'\n            disableRipple\n            >\n            {\n              numbers.map((number, index) => (\n                <Button key={index}>{number || '?'}</Button>\n              ))\n            }\n          </ButtonGroup>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default NumbersDisplay;","// @flow\n\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\n\ntype Props = {|\n  player_name: string,\n  player_answer: ?string,\n  player_answer_value: ?number,\n  player_score: number,\n  error_message: ?string,\n|};\n\nconst AnswerDisplay = ({\n  player_name,\n  player_answer,\n  player_answer_value,\n  player_score,\n  error_message,\n}: Props) => {\n  return (\n    <Grid container spacing={8}>\n      <Grid item xs align='center'>\n        {\n          player_answer\n            ? (\n              <React.Fragment>\n                <h4>{player_name}'s answer</h4>\n                <h5>{player_answer || 'None'}</h5>\n              </React.Fragment>\n            )\n            : null\n        }\n        {\n          player_answer_value != null\n            ? <h5>= {player_answer_value}</h5>\n            : <h5>{error_message || 'error'}</h5>\n        }\n        {\n          <h5>Score: {player_score}</h5>\n        }\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default AnswerDisplay;\n","// @flow\n\nimport React, {useEffect, useRef, useState} from 'react';\nimport Grid from '@material-ui/core/Grid';\n\ntype Props = {|\n  message: string,\n  timer: number,\n|};\n\nconst Waiting = ({\n  message,\n  timer,\n}: Props) => {\n  const [t, setT] = useState(timer);\n  const interval = useRef(null);\n  useEffect(() => {\n    setT(timer);\n    interval.current = setInterval(() => {\n      setT(t => t-1);\n    }, 1000);\n    return () => {\n      clearInterval(interval.current);\n      interval.current = null;\n    };\n  }, [timer, message]);\n  return (\n    <Grid container spacing={8}>\n      <Grid item xs align='center'>\n        <h3>{message} - {t}</h3>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Waiting;","// @flow\n\nimport assert from 'assert';\n\nimport type {Equation} from './types';\nimport {EQUATION_OPERATOR} from './types';\n\nclass Stack<T> {\n  base: Array<T>;\n  constructor() {\n    this.base = [];\n  }\n  push(v: T): void {\n    this.base.push(v);\n  }\n  pop(): void {\n    assert(this.base.length > 0);\n    this.base.pop();\n  }\n  get top(): T {\n    assert(this.base.length > 0);\n    return this.base[this.base.length-1];\n  }\n  get length(): number {\n    return this.base.length;\n  }\n  get empty(): bool {\n    return this.base.length === 0;\n  }\n};\n\n/**\n * Returns parsed equation or string error if failed to parse\n */\nexport const parse = (eqn: string): Equation | string => {\n  eqn = eqn.replace(/\\s/g, '');\n  if (eqn.length === 0) {\n    return 'Equation is blank';\n  }\n  if (eqn.length > 80) {\n    return 'Equation is too long';\n  }\n  const validChars = new Set([...'0123456789+-/*()']);\n  if (![...eqn].every(char => validChars.has(char))) {\n    return 'Equation should only contain digits (0-9) and operators (+-*/)';\n  }\n  const ops = new Set([...'+-*/()']);\n  // Tokenize\n  const tokens: Array<string> = [];\n  for (const c of eqn) {\n    if (ops.has(c) || tokens.length === 0) {\n      tokens.push(c);\n    } else {\n      const lIdx = tokens.length-1;\n      if (ops.has(tokens[lIdx])) {\n        tokens.push(c);\n      } else {\n        tokens[lIdx] += c;\n      }\n    }\n  }\n\n  // Shunting yard: https://en.wikipedia.org/wiki/Shunting-yard_algorithm#The_algorithm_in_detail\n  const precedence = {\n    '+': 0,\n    '-': 0,\n    '/': 1, // lower than multiplication to force multiply first\n    '*': 2,\n  };\n  const output: Array<string> = [];\n  const opstack = new Stack();\n  for (const token of tokens) {\n    if (!ops.has(token)) {\n      // number\n      output.push(token);\n    } else if (token === '(') {\n      opstack.push(token);\n    } else if (token === ')') {\n      if (opstack.empty) return 'mismatched parentheses';\n      while (opstack.top !== '(') {\n        output.push(opstack.top);\n        opstack.pop();\n      }\n      opstack.pop();\n    } else {\n      // operator\n      while (\n        !opstack.empty &&\n        opstack.top !== '(' && \n        precedence[opstack.top] >= precedence[token]\n      ) {\n        output.push(opstack.top);\n        opstack.pop();\n      }\n      opstack.push(token);\n    }\n  }\n  while (!opstack.empty) {\n    output.push(opstack.top);\n    opstack.pop();\n  }\n  // Build object\n  return ((): (Equation | string) => {\n    const stack = new Stack<Equation>();\n    for (const token of output) {\n      if (ops.has(token)) {\n        if (stack.length < 2) {\n          return 'equation invalid';\n        }\n        const b = stack.top; stack.pop();\n        const a = stack.top; stack.pop();\n        stack.push({\n          type: (token: any),\n          a,\n          b,\n        });\n      } else {\n        stack.push(Number(token));\n      }\n    }\n    if (stack.length !== 1) {\n      return 'equation invalid';\n    }\n    return stack.top;\n  })();\n};\n\n/**\n * Return the evaluated value or null if invalid\n */\nexport const evaluate = (eqn: Equation): ?number => {\n  if (typeof eqn === 'number') {\n    return eqn;\n  } else {\n    const a = evaluate(eqn.a);\n    const b = evaluate(eqn.b);\n    if (!a || !b) {\n      return null;\n    }\n    switch (eqn.type) {\n      case EQUATION_OPERATOR.ADD:\n        return a+b;\n      case EQUATION_OPERATOR.SUBTRACT:\n        return a-b;\n      case EQUATION_OPERATOR.MULTIPLY:\n        return a*b;\n      case EQUATION_OPERATOR.DIVIDE:\n        if (b === 0 || a%b !== 0) {\n          return null;\n        }\n        return a/b;\n      default:\n        return null;\n    }\n  }\n};\n\nexport const getNumbers = (eqn: Equation): Array<number> => {\n  if (typeof eqn === 'number') {\n    return [eqn];\n  }\n  return [...getNumbers(eqn.a), ...getNumbers(eqn.b)];\n};","// @flow\n\nimport React, {useState} from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nimport Waiting from './Waiting';\n\nimport {parse} from '../../shared/math/utils';\n\ntype Props = {|\n  numbers: Array<?number>,\n  isSubmitting: bool,\n  inputMessage: ?string,\n  timer: ?number,\n  setInputMessage: (?string) => void,\n  submitValue: (string) => void,\n|};\n\nconst NumbersInput = ({\n  numbers,\n  isSubmitting,\n  inputMessage,\n  setInputMessage,\n  submitValue,\n  timer,\n}: Props) => {\n  const [value, setValue] = useState<string>('');\n\n  const onSubmit = () => {\n    const equationOrError = parse(value);\n    if (typeof equationOrError === 'string') {\n      setInputMessage(`Error: ${equationOrError}`);\n    } else {\n      submitValue(value);\n    }\n  };\n  const onChange = (e) => {\n    const val = e.target.value;\n    if (val.length === 0) {\n      setInputMessage('Error: empty');\n    } else {\n      setInputMessage('');\n    }\n    setValue(val);\n  };\n\n\n  return (\n    <React.Fragment>\n      <Grid container spacing={8}>\n        <Grid item xs align='center'>\n          <TextField\n            label='Equation'\n            rows={4}\n            value={value}\n            onChange={onChange}\n            variant='outlined'\n            helperText={inputMessage}\n            onKeyPress={(e) => {\n              if (e.key === 'Enter') {\n                onSubmit();\n              }\n            }}\n          />\n        </Grid>\n      </Grid>\n      <Grid container spacing={8}>\n        <Grid item xs align='center'>\n          {\n            timer && <Waiting timer={timer} message='Time left'/>\n          }\n          <Button onClick={onSubmit} color='primary' variant='contained'>Submit</Button>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default NumbersInput;","// @flow\n\nimport React, {useContext, useState} from 'react';\nimport type {Node} from 'react';\n\nimport type {GameState, Player, Response, SubmitAnswerRequest } from '../../shared';\nimport {REQUEST_TYPE, GAME_STATUS} from '../../shared';\n\nimport NumbersDisplay from './NumbersDisplay';\nimport AnswerDisplay from './AnswerDisplay';\nimport NumbersInput from './NumbersInput';\nimport Waiting from './Waiting';\n\nimport WSContext from '../../WSContext';\n\ntype Props = {|\n  gameState: ?GameState,\n  players: Array<Player>,\n|};\n\nconst GameInner = ({\n  gameState,\n  players,\n}: Props): Node => {\n  const client = useContext(WSContext);\n  const [submitting, setSubmitting] = useState(false);\n  const [inputMessage, setInputMessage] = useState<?string>(null);\n\n  const submitValue = (value: string) => {\n    const req: SubmitAnswerRequest = {\n      type: REQUEST_TYPE.SUBMIT_ANSWER,\n      text: value,\n    };\n    setSubmitting(true);\n    setInputMessage(null);\n    client.send(req).then((res: Response) => {\n      setSubmitting(false);\n      if (res.error) {\n        setInputMessage(`Error: ${res.message}`);\n      } else {\n        setInputMessage('Answer Submitted!');\n      }\n    });\n  };\n\n  if (gameState == null) {\n    return <div>game state loading</div>;\n  }\n\n  const mainContent = (() => {\n    switch (gameState.status) {\n      case GAME_STATUS.WAITING:\n        return <Waiting message={gameState.message} timer={gameState.timer}/>\n      case GAME_STATUS.ROUND_STARTING:\n      case GAME_STATUS.ROUND_STARTED:\n      case GAME_STATUS.ROUND_FINISHED:\n        return (\n          <div>\n              <NumbersDisplay \n                target={gameState.target}\n                numbers={gameState.numbers}\n              />\n              {\n                gameState.target &&\n                  <NumbersInput\n                    submitValue={submitValue}\n                    inputMessage={inputMessage}\n                    setInputMessage={setInputMessage}\n                    isSubmitting={submitting}\n                    numbers={gameState.numbers}\n                    timer={gameState.timer}\n                  />\n              }\n          </div>\n        );\n      case GAME_STATUS.SHOWING_ANSWER:\n        return (\n          <div>\n              <NumbersDisplay \n                target={gameState.target}\n                numbers={gameState.numbers}\n              />\n              <AnswerDisplay\n                player_name={gameState.player_name}\n                player_score={gameState.player_score}\n                player_answer_value={gameState.player_answer_value} \n                player_answer={gameState.player_answer}\n                error_message={gameState.error_message}\n              />\n          </div>\n        );\n      default:\n        return null;\n    }\n  })();\n\n  return <div>\n    <span>Round {gameState.current_round} of {gameState.total_rounds}</span>\n    {mainContent}\n  </div>\n};\n\nexport default GameInner;","// @flow\n\nimport React from 'react';\n\nimport type {Player, ReadyStates, GameState, LobbyState} from '../shared';\nimport {LOBBY_STATE} from '../shared';\n\nimport Lobby from './Lobby';\nimport GameInner from './game';\n\ntype Props = {|\n  me: Player,\n  readyStates: ReadyStates,\n  lobbyState: ?LobbyState,\n  gameState: ?GameState,\n  players: Array<Player>,\n|};\n\nconst Game = ({\n  me,\n  readyStates,\n  lobbyState,\n  gameState,\n  players\n}: Props) => {\n  const isReady: bool = Boolean(readyStates[me.id]);\n  switch (lobbyState) {\n    case null:\n    case LOBBY_STATE.WAITING_FOR_PLAYERS:\n      return <Lobby isReady={isReady} />;\n    case LOBBY_STATE.IN_GAME:\n      return (\n        <GameInner\n          gameState={gameState}\n          players={players}\n        />\n      )\n    default:\n      console.error('Unexpected lobby state!', lobbyState);\n      return null;\n  }\n};\n\nexport default Game;\n","// @flow\n\nimport React, {useEffect, useState} from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport type {ID, Player, ReadyStates, LobbyState, GameState} from './shared';\nimport {EVENT_TYPE} from './shared';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Container from '@material-ui/core/Container';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport PlayerList from './components/PlayerList';\nimport Setup from './components/Setup';\nimport Game from './components/Game';\n\nimport WebSocketClient from './wsclient';\n\nimport WSContext from './WSContext';\n\nconst _ws = new WebSocketClient('ws://localhost:3001');\n\nconst App = () => {\n  // Hooks\n  const [connecting, setConnecting] = useState(true);\n  const [players, setPlayers] = useState<Array<Player>>([]);\n  const [readyStates, setReadyStates] = useState<ReadyStates>({});\n  const [lobbyState, setLobbyState] = useState<?LobbyState>(null);\n  const [gameState, setGameState] = useState<?GameState>(null);\n  const [id, setId] = useState<?ID>(null);\n\n  const me = players.find(player => player.id === id);\n\n  useEffect(() => {\n    _ws.setCallbacks({\n      onConnectionChange: (connected): void => {\n        setTimeout(() => {\n          setConnecting(!connected);\n          if (!connected) {\n            setId(null);\n          }\n        }, 250);\n      },\n      onEvent: (event): void => {\n        switch(event.type) {\n          case EVENT_TYPE.ID_UPDATE:\n            setId(event.id);\n            break;\n          case EVENT_TYPE.PLAYER_LIST_UPDATE:\n            setPlayers(event.players);\n            break;\n          case EVENT_TYPE.READY_STATES_UPDATE:\n            setReadyStates(event.ready_states);\n            break;\n          case EVENT_TYPE.LOBBY_STATE_UPDATE:\n            setLobbyState(event.state);\n            break;\n          case EVENT_TYPE.GAME_STATE_UPDATE:\n            setGameState(event.state);\n            break;\n          default:\n            console.error('unknown event', event);\n        }\n      },\n    });\n  }, []);\n\n  return (\n    <WSContext.Provider value={_ws}>\n      <Container className='my-5'>\n        <Jumbotron>\n          {\n            //testing stuff\n            <div>\n            </div>\n          }\n          <Row>\n          <Col xs={3}>\n            <PlayerList\n              me={me}\n              players={players}\n              readyStates={readyStates}\n              score={gameState && gameState.score}\n            />\n          </Col>\n          <Col>\n            {me\n              ? <Game\n                  me={me}\n                  readyStates={readyStates}\n                  lobbyState={lobbyState}\n                  gameState={gameState}\n                  players={players}\n                />\n              : <Setup />\n            }\n          </Col>\n          </Row>\n        </Jumbotron>\n        <Dialog\n          open={connecting}\n          p={5}\n        >\n          <DialogContent>\n            <div>Connecting to server...</div>\n            <CircularProgress />\n          </DialogContent>\n        </Dialog>\n      </Container>\n    </WSContext.Provider>\n  );\n}\n\nexport default App;\n\nexport type { Player };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// @flow\n\n/**\n * After changing, run\n * cp -r shared client/src && cp -r shared server/src\n */\n\nexport type ID = string;\n\nexport type Player = {|\n  id: ID,\n  name: string,\n|};\n\nexport type ReadyStates = {|\n  [ID]: bool,\n|};\n\nexport const LOBBY_STATE = {\n  WAITING_FOR_PLAYERS: ('waiting_for_players': 'waiting_for_players'),\n  IN_GAME: ('in_game': 'in_game'),\n};\n\nexport type LobbyState = $Values<typeof LOBBY_STATE>;\n\nexport * from './requests';\nexport * from './responses';\nexport * from './events';\nexport * from './game';","// @flow\n\nimport type {ID} from './index';\n\n// Client -> Server requests\nexport const REQUEST_TYPE = {\n  UPDATE_NAME: ('update_name': 'update_name'),\n  TOGGLE_READY: ('toggle_ready': 'toggle_ready'),\n  SUBMIT_ANSWER: ('submit_answer': 'submit_answer'),\n};\n\nexport type UpdateNameRequest = {|\n  type: typeof REQUEST_TYPE.UPDATE_NAME,\n  newName: string,\n|};\n\nexport type ToggleReadyRequest = {|\n  type: typeof REQUEST_TYPE.TOGGLE_READY,\n|};\n\nexport type SubmitAnswerRequest = {|\n  type: typeof REQUEST_TYPE.SUBMIT_ANSWER,\n  text: string,\n|};\n\nexport type Request = UpdateNameRequest | ToggleReadyRequest | SubmitAnswerRequest;\n\nexport type RawRequest = {|\n  m_id: ID,\n  request: Request,\n|};\n","// @flow\n\nimport type {ID, Player, ReadyStates, LobbyState, GameState} from './index';\n\n// Server -> Client events\nexport const EVENT_TYPE = {\n  PLAYER_LIST_UPDATE: ('player_list_update': 'player_list_update'),\n  READY_STATES_UPDATE: ('ready_states_update': 'ready_states_update'),\n  ID_UPDATE: ('id_update': 'id_update'),\n  LOBBY_STATE_UPDATE: ('lobby_state_update': 'lobby_state_update'),\n  GAME_STATE_UPDATE: ('game_state_update': 'game_state_update'),\n};\n\nexport type PlayerListUpdateEvent = {|\n  type: typeof EVENT_TYPE.PLAYER_LIST_UPDATE,\n  players: Array<Player>,\n|};\n\nexport type ReadyStatesUpdateEvent = {|\n  type: typeof EVENT_TYPE.READY_STATES_UPDATE,\n  ready_states: ReadyStates,\n|};\n\nexport type IDUpdateEvent = {|\n  type: typeof EVENT_TYPE.ID_UPDATE,\n  id: ?ID,\n|};\n\nexport type LobbyStateUpdateEvent = {|\n  type: typeof EVENT_TYPE.LOBBY_STATE_UPDATE,\n  state: LobbyState,\n|};\n\nexport type GameStateUpdateEvent = {|\n  type: typeof EVENT_TYPE.GAME_STATE_UPDATE,\n  state: ?GameState,\n|};\n\nexport type Event =\n  PlayerListUpdateEvent |\n  IDUpdateEvent |\n  ReadyStatesUpdateEvent |\n  LobbyStateUpdateEvent |\n  GameStateUpdateEvent;","// @flow\n\nimport type {ID} from './index';\n\nexport const MAIN_GAME_STATUS = {\n  WAITING: ('waiting': 'waiting'),\n  SHOWING_ANSWER: ('showing_answer': 'showing_answer'),\n};\nexport type MainGameStatus = $Values<typeof MAIN_GAME_STATUS>;\n\nexport const PLAYING_GAME_STATUS = {\n  ROUND_STARTING: ('round_starting': 'round_starting'),\n  ROUND_STARTED: ('round_started': 'round_started'),\n  ROUND_FINISHED: ('round_finished': 'round_finished'),\n};\nexport type PlayingGameStatus = $Values<typeof PLAYING_GAME_STATUS>;\n\nexport const GAME_STATUS = {\n  ...MAIN_GAME_STATUS,\n  ...PLAYING_GAME_STATUS,\n};\nexport type GameStatus = MainGameStatus | PlayingGameStatus;\n\nexport const ROUND_LENGTH = {\n  _30: (30: 30),\n};\nexport type RoundLength = $Values<typeof ROUND_LENGTH>;\n\nexport type Score = {|\n  [ID]: number,\n|}\n\nexport type BaseGameState = {|\n  current_round: number,\n  total_rounds: number,\n  score: Score,\n|};\n\nexport type WaitingGameState = {|\n  ...BaseGameState,\n  status: typeof MAIN_GAME_STATUS.WAITING,\n  timer: number,\n  message: string,\n|};\n\nexport type PlayingGameState = {|\n  ...BaseGameState,\n  status: PlayingGameStatus,\n  timer: ?number,\n  target: ?number,\n  numbers: Array<?number>,\n|};\n\nexport type ShowingGameState = {|\n  ...BaseGameState,\n  status: typeof MAIN_GAME_STATUS.SHOWING_ANSWER,\n  target: number,\n  numbers: Array<number>,\n  player_name: string,\n  player_answer: ?string,\n  player_answer_value: ?number,\n  player_score: number,\n  error_message: ?string,\n|};\n\nexport type GameState = WaitingGameState | PlayingGameState | ShowingGameState;\n"],"sourceRoot":""}